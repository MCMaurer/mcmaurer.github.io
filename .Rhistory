![](https://media.giphy.com/media/Ju7l5y9osyymQ/giphy.gif)
Rick Astley's fashion sense is like a classic theoretical paper: timeless. Seriously, get a load of that black turtleneck and trousers under a stone trench coat...
# Chunk 3
RickRoll <- function(nt, r, k){
nt1 <- nt * exp(r * (1-nt / k))
return(nt1)
}
RickRollIter <- function(r, k, n0, tf){
data <- rep(n0, tf)
for (t in 1:tf-1) {
data[t+1] <- RickRoll(nt = data[t], r = r, k = k)
}
tibble(results = data,
timestep = 1:tf)
}
RickRollVec_nostep <- function(r, k, n0, tf) {
res <- matrix(ncol = length(r), nrow = tf[1])
res[1, ] <- n0
for (t in 2:tf[1]) {
res[t, ] <- RickRoll(res[t-1, ], r = r, k = k)
}
as.list(as.data.frame(res))
}
# Chunk 4
sim <- tibble(k = 100,
n0 = 50,
tf = 80,
r = c(1.5,2.3,2.6,3.0))
sim
options(future.makeNodePSOCK.setup_strategy = "sequential")
plan(multisession, workers = 4)
sim <- tibble(k = 100,
n0 = 50,
tf = 80,
r = seq(from = 1.5, to = 3, length.out = 1000))
microbenchmark::microbenchmark(
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(results = future_pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps)),
times = 10
)
# Chunk 1
library(tidyverse)
library(patchwork)
library(furrr)
knitr::opts_chunk$set(fig.fullwidth=TRUE, dpi=300, fig.width=7, fig.height=3.5)
# Chunk 2
![](https://media.giphy.com/media/Ju7l5y9osyymQ/giphy.gif)
Rick Astley's fashion sense is like a classic theoretical paper: timeless. Seriously, get a load of that black turtleneck and trousers under a stone trench coat...
# Chunk 3
RickRoll <- function(nt, r, k){
nt1 <- nt * exp(r * (1-nt / k))
return(nt1)
}
RickRollIter <- function(r, k, n0, tf){
data <- rep(n0, tf)
for (t in 1:(length(data)-1)) {
data[t+1] <- RickRoll(nt = data[t], r = r, k = k)
}
res <- tibble(results = data,
timestep = 1:tf)
return(res)
}
RickRollVec_nostep <- function(r, k, n0, tf) {
res <- matrix(ncol = length(r), nrow = tf[1])
res[1, ] <- n0
for (t in 2:tf[1]) {
res[t, ] <- RickRoll(res[t-1, ], r = r, k = k)
}
as.list(as.data.frame(res))
}
# Chunk 4
sim <- tibble(k = 100,
n0 = 50,
tf = 80,
r = c(1.5,2.3,2.6,3.0))
sim
options(future.makeNodePSOCK.setup_strategy = "sequential")
plan(multisession, workers = 4)
sim <- tibble(k = 100,
n0 = 50,
tf = 80,
r = seq(from = 1.5, to = 3, length.out = 1000))
microbenchmark::microbenchmark(
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(results = future_pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps)),
times = 10
)
sim <- tibble(k = 100,
n0 = 50,
tf = c(80,100),
r = seq(from = 1.5, to = 3, length.out = 1000))
sim <- tibble(k = 100,
n0 = 50,
tf = sample(80:100, 1000, replace = T),
r = seq(from = 1.5, to = 3, length.out = 1000))
microbenchmark::microbenchmark(
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(results = future_pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps)),
times = 10
)
RickRoll <- function(nt, r, k){
nt1 <- nt * exp(r * (1-nt / k))
return(nt1)
}
RickRollIter <- function(r, k, n0, tf){
data <- rep(n0, tf)
for (t in 1:(length(data)-1)) {
data[t+1] <- RickRoll(nt = data[t], r = r, k = k)
}
return(tibble(results = data,
timestep = 1:tf))
}
RickRollVec_nostep <- function(r, k, n0, tf) {
res <- matrix(ncol = length(r), nrow = tf[1])
res[1, ] <- n0
for (t in 2:tf[1]) {
res[t, ] <- RickRoll(res[t-1, ], r = r, k = k)
}
as.list(as.data.frame(res))
}
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter))
sim %>%
mutate(test = RickRollVec(r = r, k = k, n0 = n0, tf = tf))
options(future.makeNodePSOCK.setup_strategy = "sequential")
plan(multisession, workers = 4)
sim <- tibble(k = 100,
n0 = 50,
tf = 80,
r = seq(from = 1.5, to = 3, length.out = 1000))
microbenchmark::microbenchmark(
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(results = future_pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps)),
times = 10
)
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps))
sim %>%
mutate(test = list(RickRollVec_quickstep(r = r, k = k, n0 = n0, tf = tf))) %>%
unnest(test) %>%
unnest(c(res, step))
50:60 %>%
as_tibble(rownames = "step") %>%
mutate(step = as.numeric(step))
furrr::future_pmap()
RickRoll <- function(nt, r, k){
nt1 <- nt * exp(r * (1-nt / k))
return(nt1)
}
RickRollIter <- function(r, k, n0, tf){
data <- rep(n0, tf)
for (t in 1:(tf-1)) {
data[t+1] <- RickRoll(nt = data[t], r = r, k = k)
}
return(tibble(results = data,
timestep = 1:tf))
}
RickRollVec_nostep <- function(r, k, n0, tf) {
res <- matrix(ncol = length(r), nrow = tf[1])
res[1, ] <- n0
for (t in 2:tf[1]) {
res[t, ] <- RickRoll(res[t-1, ], r = r, k = k)
}
as.list(as.data.frame(res))
}
microbenchmark::microbenchmark(
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(results = future_pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps)),
times = 10
)
RickRollVec <- function(r, k, n0, tf) {
res <- matrix(ncol = length(r), nrow = tf[1])
res[1, ] <- n0
for (t in 2:tf[1]) {
res[t, ] <- RickRoll(res[t-1, ], r = r, k = k)
}
as.list(as.data.frame(res))
}
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps))
sim <- tibble(k = 100,
n0 = 50,
tf = 80,
r = c(1.5,2.3,2.6,3.0))
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps))
results <- list(c(1,2,3), c(1,4,5), c(1,8,20))
results
steps <- map(results, seq_along)
append(results, steps)
map2(results, steps, list)
RickRollVec_steps <- function(r, k, n0, tf) {
res <- matrix(ncol = length(r), nrow = tf[1])
res[1, ] <- n0
for (t in 2:tf[1]) {
res[t, ] <- RickRoll(res[t-1, ], r = r, k = k)
}
results <- as.list(as.data.frame(res))
steps <- map(results, seq_along)
map2(results, steps, list)
}
sim %>%
mutate(test = RickRollVec_steps(r = r, k = k, n0 = n0, tf = tf))
sim %>%
mutate(test = RickRollVec_steps(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(test)
sim %>%
mutate(test = RickRollVec_steps(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(test) %>%
unnest(test)
map2(results, steps, as_tibble)
map2(results, steps, bind_cols)
map2(results, steps, bind_cols, names = c("results", "step"))
?bind_cols()
map2(results, steps, bind_cols, .id = "thing")
bind_cols(results, steps)
bind_rows(results, steps)
bind_cols(list(results, steps))
map2(results, steps, bind_cols)
map2(results, steps, ~bind_cols(.x, .y) %>% set_names(c("res", "step")))
RickRollVec_steps <- function(r, k, n0, tf) {
res <- matrix(ncol = length(r), nrow = tf[1])
res[1, ] <- n0
for (t in 2:tf[1]) {
res[t, ] <- RickRoll(res[t-1, ], r = r, k = k)
}
results <- as.list(as.data.frame(res))
steps <- map(results, seq_along)
map2(results, steps, ~bind_cols(.x, .y) %>% set_names(c("res", "step")))
}
sim %>%
mutate(test = RickRollVec_steps(r = r, k = k, n0 = n0, tf = tf))
sim %>%
mutate(test = RickRollVec_steps(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(test)
microbenchmark::microbenchmark(
sim %>%
mutate(test = RickRollVec_steps(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(test),
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps)),
times = 10
)
sim %>%
mutate(test = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(steps = map(test, seq_along)) %>%
unnest(c(test, steps))
sim %>%
mutate(results = RickRollVec_nostep(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)) %>%
ggplot(aes(x = timestep, y = results)) +
geom_point() +
geom_line() +
facet_wrap(vars(r)) +
ylab("Pop size") +
MCMsBasics::minimal_ggplot_theme()
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)) %>%
ggplot(aes(x = timestep, y = results)) +
geom_point() +
geom_line() +
facet_wrap(vars(r)) +
ylab("Pop size") +
MCMsBasics::minimal_ggplot_theme()
microbenchmark::microbenchmark(
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)),
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
times = 10
)
sim <- tibble(k = 100,
n0 = 50,
tf = 1000,
r = seq(from=1.5,to=3.6,length.out = 1000))
microbenchmark::microbenchmark(
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)),
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
times = 10
)
test <- microbenchmark::microbenchmark(
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)),
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
times = 10
)
test
test$time
str(test)
test %>%
group_by(expr)
test %>%
group_by(expr) %>%
summarise(mean(time))
RickRollVec <- function(r, k, n0, tf) {
res <- matrix(ncol = length(r), nrow = tf[1])
res[1, ] <- n0
for (t in 2:tf[1]) {
res[t, ] <- RickRoll(res[t-1, ], r = r, k = k)
}
as.list(as.data.frame(res))
}
sim <- tibble(k = 100,
n0 = 50,
tf = 1000,
r = seq(from=1.5,to=3.6,length.out = 1000))
runloop <- function() {
res <- matrix(NA, nrow = sim$tf[1], ncol = length(sim$r))
res[1, ] <- sim$n0
for (t in 1:(sim$tf[1] - 1)) {
res[t + 1, ] <- RickRoll(res[t, ], r = sim$r, k = sim$k)
}
return(res)
}
microbenchmark::microbenchmark(
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)),
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
runloop(),
times = 10
)
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)) %>%
ggplot(aes(x = timestep, y = results)) +
geom_point() +
geom_line() +
facet_wrap(vars(r)) +
ylab("Pop size") +
MCMsBasics::minimal_ggplot_theme()
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(results)
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(results) %>%
mutate(timestep = rep(1:tf, times = nrow(.)/tf))
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(results) %>%
mutate(timestep = rep(1:tf, times = (nrow(.)/tf)))
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(results) %>%
mutate(timestep = rep(1:tf, times = (nrow(.)/tf)))
mutate(timestep = rep(1:tf)
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(results) %>%
mutate(timestep = rep(1:tf))
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(results) %>%
mutate(timestep = rep(1:(.$tf[1]), times = (nrow(.)/.$tf[1])))
microbenchmark::microbenchmark(
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)),
sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
unnest(results) %>%
mutate(timestep = rep(1:(.$tf[1]), times = (nrow(.)/.$tf[1]))),
sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
runloop(),
times = 10
)
microbenchmark::microbenchmark(
vectorized = sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)),
pmap = sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
loop = runloop(),
times = 10
)
library(tidyverse)
pmult <- exp(rnorm(100, sd = 0.1))
pmult
accumulate(pmult, ~popmod(.x, .y, r = r, K = K), .init = 0.1)
popmod <- function(N, popmult, r, K){
N * (r  - r*(N / K))*popmult
}
accumulate(pmult, ~popmod(.x, .y, r = r, K = K), .init = 0.1)
library(tidyverse)
#timesteps
tmax <- 100
#pop growth
r <- 1.2
#capacity
K <- 20
#abundance sd
sdev <- 0.1
pmult <- exp(rnorm(100, sd = 0.1))
pmult
popmod <- function(N, popmult, r, K){
N * (r  - r*(N / K))*popmult
}
accumulate(pmult, ~popmod(.x, .y, r = r, K = K), .init = 0.1)
accumulate(pmult, ~popmod(.x, popmult = .y, r = r, K = K), .init = 0.1)
accumulate(pmult, ~popmod(N = .x, popmult = .y, r = r, K = K), .init = 0.1)
tf <- 200
r <- 1.2
k <- 100
n0 <- 50
accumulate(1:tf, ~RickRoll(nt = .x, r = r, k = k), .init = n0)
r <- 2.3
k <- 100
n0 <- 50
accumulate(1:tf, ~RickRoll(nt = .x, r = r, k = k), .init = n0)
accumulate(1:tf, ~RickRoll(nt = .x, r = r, k = k), .init = n0) %>% length()
accumulate(2:tf, ~RickRoll(nt = .x, r = r, k = k), .init = n0)
}
RickRollAcc <- function(r, k, n0, tf){
accumulate(2:tf, ~RickRoll(nt = .x, r = r, k = k), .init = n0)
}
microbenchmark::microbenchmark(
vectorized = sim %>%
mutate(results = RickRollVec(r = r, k = k, n0 = n0, tf = tf)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)),
pmap = sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter)),
acc = sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollAcc)) %>%
mutate(timestep = map(results, seq_along)) %>%
unnest(c(results, timestep)),
times = 10
)
# Chunk 1
library(tidyverse)
library(patchwork)
knitr::opts_chunk$set(fig.fullwidth=TRUE, dpi=300, fig.width=9, fig.height=5)
# Chunk 2
![](https://media.giphy.com/media/Ju7l5y9osyymQ/giphy.gif)
Rick Astley's fashion sense is like a classic theoretical paper: timeless. Seriously, get a load of that black turtleneck and trousers under a stone trench coat...
# Chunk 3
RickRoll <- function(nt, r, k){
nt * exp(r * (1-nt / k))
}
RickRollIter <- function(r, k, n0, tf){
data <- rep(n0, tf)
for (t in 1:(tf-1)) {
data[t+1] <- RickRoll(nt = data[t], r = r, k = k)
}
return(tibble(results = data,
timestep = 1:tf))
}
# Chunk 4
sim <- tibble(k = 100,
n0 = 50,
tf = 80,
r = c(1.5,2.3,2.6,3.0))
sim <- sim %>%
mutate(results = pmap(.l = list(r, k, n0, tf), .f = RickRollIter))
sim
